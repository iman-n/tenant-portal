name: Deploy to AWS with Terraform

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    # Checkout the repository
    - name: Checkout code
      uses: actions/checkout@v3

    # Set up Terraform CLI
    - name: Set up Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        # cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
        terraform_version: latest

    # Configure AWS credentials
    - name: Configure AWS
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    # Navigate to Terraform directory and initialize
    - name: Terraform Init
      working-directory: ./terraform
      run: terraform init

    # Apply Terraform to provision resources
    - name: Terraform Apply
      id: tf_apply
      working-directory: ./terraform
      run: |
        terraform apply -auto-approve
        terraform output -raw instance_ip > ../instance_ip.txt
      
    # Debug instance_ip.txt content
    - name: Debug instance_ip.txt Content
      run: |
        echo "Content of instance_ip.txt:"
        cat instance_ip.txt

    # Extract and sanitize Public IP
    - name: Extract Public IP
      run: |
        PUBLIC_IP=$(cat instance_ip.txt | grep -Eo '([0-9]{1,3}\.){3}[0-9]{1,3}' | head -n 1 | tr -d '\r\n')
        echo "Public IP is $PUBLIC_IP"
        echo "PUBLIC_IP=$PUBLIC_IP" >> $GITHUB_ENV

    # # Wait for EC2 instance to be ready
    # - name: Wait for EC2 Instance to be Ready
    #   run: |
    #     INSTANCE_ID=$(aws ec2 describe-instances --filters "Name=tag:Name,Values=docker-compose-host" --query "Reservations[0].Instances[0].InstanceId" --output text)
    #     aws ec2 wait instance-status-ok --instance-ids $INSTANCE_ID

    # Wait for SSH to be Ready
    - name: Wait for SSH Connectivity
      run: |
        for i in {1..10}; do
          ssh -o StrictHostKeyChecking=no -i ${{ secrets.EC2_KEY_PATH }} ubuntu@${{ env.PUBLIC_IP }} "echo SSH is ready" && break || sleep 10
        done

    # Sleep for 60 seconds
    - name: Sleep for Server Initialization
      run: sleep 60

    # Log in to Amazon ECR
    - name: Log in to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    # Build and push backend Docker image
    - name: Build and Push Backend Image
      working-directory: ./api
      run: |
        docker build -t backend .
        docker tag backend:latest ${{ secrets.ECR_REPOSITORY }}/backend:latest
        docker push ${{ secrets.ECR_REPOSITORY }}/backend:latest

    # Build and push frontend Docker image with dynamic public IP
    - name: Build and Push Frontend Image
      working-directory: ./web
      run: |
        docker build --build-arg VITE_GRAPHQL_URI=http://${{ env.PUBLIC_IP }}:3000/graphql -t frontend
        docker tag frontend:latest ${{ secrets.ECR_REPOSITORY }}/frontend:latest
        docker push ${{ secrets.ECR_REPOSITORY }}/frontend:latest

    - name: Set up SSH key
      run: |
        echo "${{ secrets.EC2_PRIVATE_KEY }}" > ec2-key.pem
        chmod 600 ec2-key.pem

    # Deploy on EC2
    - name: SSH and Deploy
      run: |
        # Copy docker-compose.prod.yml and .env to EC2
        scp -o StrictHostKeyChecking=no -i ec2-key.pem docker-compose.prod.yml ubuntu@${{ env.PUBLIC_IP }}:/home/ubuntu/

        aws ecr get-login-password --region eu-central-1 | docker login --username AWS --password-stdin 552912569893.dkr.ecr.eu-central-1.amazonaws.com

        # Retrieve environment variables from SSM
        export OPENAI_API_KEY=$(aws ssm get-parameter --name "/tenant-test/OPENAI_API_KEY" --with-decryption --query "Parameter.Value" --output text)
        export DATABASE_URL=$(aws ssm get-parameter --name "/tenant-test/DATABASE_URL" --query "Parameter.Value" --output text)
        export REDIS_URL=$(aws ssm get-parameter --name "/tenant-test/REDIS_URL" --query "Parameter.Value" --output text)
        export POSTGRES_USER=$(aws ssm get-parameter --name "/tenant-test/POSTGRES_USER" --with-decryption --query "Parameter.Value" --output text)
        export POSTGRES_PASSWORD=$(aws ssm get-parameter --name "/tenant-test/POSTGRES_PASSWORD" --with-decryption --query "Parameter.Value" --output text)
        export POSTGRES_DB=$(aws ssm get-parameter --name "/tenant-test/POSTGRES_DB" --with-decryption --query "Parameter.Value" --output text)

        ssh -o StrictHostKeyChecking=no -i ec2-key.pem ubuntu@${{ env.PUBLIC_IP }} << EOF
        cd /path/to/docker-compose/files
        docker-compose -f docker-compose.prod.yml pull
        docker-compose -f docker-compose.prod.yml up -d --remove-orphans
        EOF
